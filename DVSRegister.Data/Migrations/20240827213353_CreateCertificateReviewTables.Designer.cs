// <auto-generated />
using System;
using DVSRegister.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace DVSRegister.Data.Migrations
{
    [DbContext(typeof(DVSRegisterDbContext))]
    [Migration("20240827213353_CreateCertificateReviewTables")]
    partial class CreateCertificateReviewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DVSRegister.Data.Entities.Cab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CabName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Cab");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CabName = "EY",
                            CreatedTime = new DateTime(2024, 8, 27, 21, 33, 53, 172, DateTimeKind.Utc).AddTicks(4848)
                        },
                        new
                        {
                            Id = 2,
                            CabName = "DSIT",
                            CreatedTime = new DateTime(2024, 8, 27, 21, 33, 53, 172, DateTimeKind.Utc).AddTicks(4852)
                        },
                        new
                        {
                            Id = 3,
                            CabName = "ACCS",
                            CreatedTime = new DateTime(2024, 8, 27, 21, 33, 53, 172, DateTimeKind.Utc).AddTicks(4853)
                        },
                        new
                        {
                            Id = 4,
                            CabName = "Kantara Initiative",
                            CreatedTime = new DateTime(2024, 8, 27, 21, 33, 53, 172, DateTimeKind.Utc).AddTicks(4855)
                        });
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CabUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CabEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CabId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CabId");

                    b.ToTable("CabUser");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CertificateReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("CommentsForIncorrect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("InformationMatched")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAuthenticyVerifiedCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCabDetailsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCabLogoCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCertificationScopeCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDateOfExpiryCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDateOfIssueCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGPG44Correct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGPG45Correct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocationCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProviderDetailsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRolesCertifiedCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsServiceNameCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsServiceProvisionCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsServiceSummaryCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsURLLinkToServiceCorrect")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProviProviderProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionComments")
                        .HasColumnType("text");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("VerifiedUser")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviProviderProfileId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CertificateReview");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CertificateReviewRejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CertificateReviewRejectionReason");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Reason = "Information is missing from the certificate"
                        },
                        new
                        {
                            Id = 2,
                            Reason = "The certificate contains invalid information"
                        },
                        new
                        {
                            Id = 3,
                            Reason = "The information submitted does not match the information on the certificate"
                        },
                        new
                        {
                            Id = 4,
                            Reason = "The certificate or information submitted contains errors"
                        },
                        new
                        {
                            Id = 5,
                            Reason = "Other"
                        });
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CertificateReviewRejectionReasonMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateReviewRejectionReasonId")
                        .HasColumnType("integer");

                    b.Property<int>("CetificateReviewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CertificateReviewRejectionReasonId");

                    b.HasIndex("CetificateReviewId");

                    b.ToTable("CertificateReviewRejectionReasonMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ConsentToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("TokenId");

                    b.ToTable("ConsentToken");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.IdentityProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityProfileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityProfile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityProfileName = "L1A "
                        },
                        new
                        {
                            Id = 2,
                            IdentityProfileName = "L1B "
                        },
                        new
                        {
                            Id = 3,
                            IdentityProfileName = "L1C "
                        },
                        new
                        {
                            Id = 4,
                            IdentityProfileName = "L2A "
                        },
                        new
                        {
                            Id = 5,
                            IdentityProfileName = "L2B "
                        },
                        new
                        {
                            Id = 6,
                            IdentityProfileName = "L3A "
                        },
                        new
                        {
                            Id = 7,
                            IdentityProfileName = "M1A "
                        },
                        new
                        {
                            Id = 8,
                            IdentityProfileName = "M1B "
                        },
                        new
                        {
                            Id = 9,
                            IdentityProfileName = "M1C "
                        },
                        new
                        {
                            Id = 10,
                            IdentityProfileName = "M1D "
                        },
                        new
                        {
                            Id = 11,
                            IdentityProfileName = "M2A "
                        },
                        new
                        {
                            Id = 12,
                            IdentityProfileName = "M2B "
                        },
                        new
                        {
                            Id = 13,
                            IdentityProfileName = "M2C "
                        },
                        new
                        {
                            Id = 14,
                            IdentityProfileName = "M3A "
                        },
                        new
                        {
                            Id = 15,
                            IdentityProfileName = "H1A "
                        },
                        new
                        {
                            Id = 16,
                            IdentityProfileName = "H1B "
                        },
                        new
                        {
                            Id = 17,
                            IdentityProfileName = "H1C "
                        },
                        new
                        {
                            Id = 18,
                            IdentityProfileName = "H2A "
                        },
                        new
                        {
                            Id = 19,
                            IdentityProfileName = "H2B "
                        },
                        new
                        {
                            Id = 20,
                            IdentityProfileName = "H2C "
                        },
                        new
                        {
                            Id = 21,
                            IdentityProfileName = "H2D "
                        },
                        new
                        {
                            Id = 22,
                            IdentityProfileName = "H2E "
                        },
                        new
                        {
                            Id = 23,
                            IdentityProfileName = "H3A "
                        },
                        new
                        {
                            Id = 24,
                            IdentityProfileName = "V1A "
                        },
                        new
                        {
                            Id = 25,
                            IdentityProfileName = "V1B "
                        },
                        new
                        {
                            Id = 26,
                            IdentityProfileName = "V1C "
                        },
                        new
                        {
                            Id = 27,
                            IdentityProfileName = "V1D "
                        },
                        new
                        {
                            Id = 28,
                            IdentityProfileName = "V2A "
                        },
                        new
                        {
                            Id = 29,
                            IdentityProfileName = "V2B "
                        },
                        new
                        {
                            Id = 30,
                            IdentityProfileName = "V2C "
                        },
                        new
                        {
                            Id = 31,
                            IdentityProfileName = "V2D "
                        },
                        new
                        {
                            Id = 32,
                            IdentityProfileName = "V3A "
                        });
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.PreRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<int>("ConfirmAccuracy")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasParentCompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApplicationSponsor")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ParentCompanyLocation")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("ParentCompanyRegisteredName")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("RegisteredCompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(160)");

                    b.Property<string>("SponsorEmail")
                        .HasColumnType("varchar(254)");

                    b.Property<string>("SponsorFullName")
                        .HasColumnType("text");

                    b.Property<string>("SponsorJobTitle")
                        .HasColumnType("text");

                    b.Property<string>("SponsorTelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URN")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PreRegistration");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.PreRegistrationCountryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("PreRegistrationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PreRegistrationId");

                    b.ToTable("PreRegistrationCountryMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.PreRegistrationReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("IsBannedPoliticalApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCheckListApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompanyApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCountryApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDirectorshipsAndRelationApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDirectorshipsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsECCheckApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProvidersWebpageApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSanctionListApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTARICApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTradingAddressApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUNFCApproved")
                        .HasColumnType("boolean");

                    b.Property<int>("PreRegistrationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PrimaryCheckTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PrimaryCheckUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("RejectionReason")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SecondaryCheckTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SecondaryCheckUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreRegistrationId")
                        .IsUnique();

                    b.HasIndex("PrimaryCheckUserId");

                    b.HasIndex("SecondaryCheckUserId");

                    b.ToTable("PreRegistrationReview");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PreRegistrationId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PublicContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegisteredName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "RegisteredName", "TradingName" });

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebsiteAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PreRegistrationId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ProviderProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CabUserId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DUNSNumber")
                        .HasColumnType("text");

                    b.Property<bool>("HasRegistrationNumber")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PrimaryContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactJobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactTelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProviderStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderTelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderWebsiteAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegisteredName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "RegisteredName", "TradingName" });

                    b.Property<string>("SecondaryContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactJobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactTelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CabUserId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("ProviderProfile");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.QualityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QualityType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("QualityLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Low",
                            QualityType = 1
                        },
                        new
                        {
                            Id = 2,
                            Level = "Medium",
                            QualityType = 1
                        },
                        new
                        {
                            Id = 3,
                            Level = "High",
                            QualityType = 1
                        },
                        new
                        {
                            Id = 4,
                            Level = "Low",
                            QualityType = 2
                        },
                        new
                        {
                            Id = 5,
                            Level = "Medium",
                            QualityType = 2
                        },
                        new
                        {
                            Id = 6,
                            Level = "High",
                            QualityType = 2
                        },
                        new
                        {
                            Id = 7,
                            Level = "Very High",
                            QualityType = 2
                        });
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.RegisterPublishLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("RegisterPublishLog");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Identity Service Provider (IDSP)"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Attribute Service Provider (ASP)"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Orchestration Service Provider (OSP)"
                        });
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CabUserId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ConformityExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ConformityIssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FileSizeInKb")
                        .HasColumnType("decimal(10, 1)");

                    b.Property<bool>("HasGPG44")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasGPG45")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSupplementarySchemes")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProviderProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "ServiceName" });

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceNumber")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TrustMarkNumber")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CabUserId");

                    b.HasIndex("ProviderProfileId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceIdentityProfileMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdentityProfileId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceIdentityProfileMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceQualityLevelMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QualityLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QualityLevelId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceQualityLevelMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRoleMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceSupSchemeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplementarySchemeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplementarySchemeId");

                    b.ToTable("ServiceSupSchemeMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.SupplementaryScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplementaryScheme");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SchemeName = "Right to Work"
                        },
                        new
                        {
                            Id = 2,
                            SchemeName = "Right to Rent"
                        },
                        new
                        {
                            Id = 3,
                            SchemeName = "Disclosure and Barring Service"
                        });
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.UniqueReferenceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CheckedByCAB")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastCheckedTimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PreRegistrationId")
                        .HasColumnType("integer");

                    b.Property<string>("RegisteredDIPName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleasedTimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("URN")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("URNStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("Validity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreRegistrationId");

                    b.ToTable("UniqueReferenceNumber");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CabUser", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.Cab", "Cab")
                        .WithMany()
                        .HasForeignKey("CabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cab");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CertificateReview", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.ProviderProfile", "ProviderProfile")
                        .WithMany()
                        .HasForeignKey("ProviProviderProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderProfile");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CertificateReviewRejectionReasonMapping", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.CertificateReviewRejectionReason", "CertificateReviewRejectionReason")
                        .WithMany()
                        .HasForeignKey("CertificateReviewRejectionReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.CertificateReview", "CetificateReview")
                        .WithMany("CertificateReviewRejectionReasonMapping")
                        .HasForeignKey("CetificateReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateReviewRejectionReason");

                    b.Navigation("CetificateReview");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.PreRegistrationCountryMapping", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.PreRegistration", "PreRegistration")
                        .WithMany("PreRegistrationCountryMappings")
                        .HasForeignKey("PreRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("PreRegistration");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.PreRegistrationReview", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.PreRegistration", "PreRegistration")
                        .WithOne("PreRegistrationReview")
                        .HasForeignKey("DVSRegister.Data.Entities.PreRegistrationReview", "PreRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.User", "PrimaryCheckUser")
                        .WithMany()
                        .HasForeignKey("PrimaryCheckUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.User", "SecondaryCheckUser")
                        .WithMany()
                        .HasForeignKey("SecondaryCheckUserId");

                    b.Navigation("PreRegistration");

                    b.Navigation("PrimaryCheckUser");

                    b.Navigation("SecondaryCheckUser");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Provider", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.PreRegistration", "PreRegistration")
                        .WithMany()
                        .HasForeignKey("PreRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreRegistration");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ProviderProfile", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.CabUser", "CabUser")
                        .WithMany()
                        .HasForeignKey("CabUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabUser");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.RegisterPublishLog", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Service", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.CabUser", "CabUser")
                        .WithMany()
                        .HasForeignKey("CabUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.ProviderProfile", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabUser");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceIdentityProfileMapping", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.IdentityProfile", "IdentityProfile")
                        .WithMany()
                        .HasForeignKey("IdentityProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.Service", "Service")
                        .WithMany("ServiceIdentityProfileMapping")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityProfile");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceQualityLevelMapping", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.QualityLevel", "QualityLevel")
                        .WithMany()
                        .HasForeignKey("QualityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.Service", "Service")
                        .WithMany("ServiceQualityLevelMapping")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualityLevel");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceRoleMapping", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.Service", "Service")
                        .WithMany("ServiceRoleMapping")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ServiceSupSchemeMapping", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.Service", "Service")
                        .WithMany("ServiceSupSchemeMapping")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVSRegister.Data.Entities.SupplementaryScheme", "SupplementaryScheme")
                        .WithMany()
                        .HasForeignKey("SupplementarySchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("SupplementaryScheme");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.UniqueReferenceNumber", b =>
                {
                    b.HasOne("DVSRegister.Data.Entities.PreRegistration", "PreRegistration")
                        .WithMany()
                        .HasForeignKey("PreRegistrationId");

                    b.Navigation("PreRegistration");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.CertificateReview", b =>
                {
                    b.Navigation("CertificateReviewRejectionReasonMapping");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.PreRegistration", b =>
                {
                    b.Navigation("PreRegistrationCountryMappings");

                    b.Navigation("PreRegistrationReview")
                        .IsRequired();
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.ProviderProfile", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("DVSRegister.Data.Entities.Service", b =>
                {
                    b.Navigation("ServiceIdentityProfileMapping");

                    b.Navigation("ServiceQualityLevelMapping");

                    b.Navigation("ServiceRoleMapping");

                    b.Navigation("ServiceSupSchemeMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
