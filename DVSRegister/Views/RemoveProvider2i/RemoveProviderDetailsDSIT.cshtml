@using DVSRegister.CommonUtility.Models.Enums
@* TODO: update content *@

@model RemoveProviderViewModel
@{
    ViewData["Title"] = "You are reviewing a request to remove a service provider from the register";
    Layout = "~/Views/Shared/_LayoutConsentPages.cshtml";
}

@{
    ViewData["HidePublishStatus"] = true;// setting variable to hide status field in partial view
}
@using (Html.BeginForm("RemoveProviderDetailsDSIT", "RemoveProvider2i", FormMethod.Post))
{

    @Html.HiddenFor(m => m.token)

    <div class="govuk-width-container">

        <main id="main-content" class="govuk-main-wrapper" role="main">
            <div class="govuk-grid-row">

                <div class="govuk-grid-column-full">
                    @if (ViewData.ModelState.ErrorCount > 0)
                    {
                        ViewData["Title"] = "Error: " + ViewData["Title"];
                        @await Html.PartialAsync("~/Views/PartialViews/_ErrorSummaryView.cshtml", Model)
                    }
                    <h1 class="govuk-heading-xl">You are reviewing a request to remove a service provider from the register</h1>
                    <p class="govuk-body">
                        This action will remove all the company information and any services listed
                        under the profile
                    </p>
                    <h2 class="govuk-heading-m">Basic information</h2>
                    <dl class="govuk-summary-list govuk-!-margin-bottom-8">
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                Public contact email
                            </dt>
                            <dd class="govuk-summary-list__value">
                                @Html.DisplayFor(model => model.Provider.PublicContactEmail)
                            </dd>
                        </div>
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                Telephone number
                            </dt>
                            <dd class="govuk-summary-list__value">
                                @Html.DisplayFor(model => model.Provider.ProviderTelephoneNumber)
                            </dd>
                        </div>
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                Website address
                            </dt>
                            <dd class="govuk-summary-list__value">
                                @Model.Provider.ProviderWebsiteAddress
                            </dd>
                        </div>
                    </dl>


                    @foreach (var service in Model.Provider.Services)
                    {
                        <h2 class="govuk-heading-m"> Service: @service.ServiceName </h2>
                        @await Html.PartialAsync("~/Views/Consent/PartialViews/_ServiceDetailsView.cshtml", service)

                        @if (service.ServiceSupSchemeMapping != null && service.ServiceSupSchemeMapping.Count > 0)
                        {
                            if ((service.ServiceSupSchemeMapping.Any(mapping => mapping.SchemeGPG44Mapping != null && mapping.SchemeGPG44Mapping.Count > 0))
                            || (service.ServiceSupSchemeMapping.Any(mapping => mapping.SchemeGPG45Mapping != null && mapping.SchemeGPG45Mapping.Count > 0)))
                            {

                                <h3 class="govuk-heading-m">Supplementary codes</h3>

                                @await Html.PartialAsync("~/Views/PartialViews/_SchemeMappingView.cshtml", service)

                            }
                        }

                        @if (service.ServiceType == ServiceTypeEnum.WhiteLabelled)
                        {

                            @await Html.PartialAsync("~/Views/PartialViews/_UnderpinningServiceDetailsView.cshtml", service)

                        }

                        <hr class="govuk-section-break govuk-section-break--m">
                    }



                    <p class="govuk-body">Please read the following carefully before proceeding:</p>
                    <ul class="govuk-list govuk-list--bullet">
                        <li>Review the details above and the reason for removal carefully.</li>
                        <li>
                            You should not accept until you are satisfied that all legislative requirements
                            have been met in relation to the provider removal.
                        </li>
                        <li>
                            Once you confirm and click Accept Removal , the service provider s entire
                            record will be permanently removed from the public register and you will
                            receive a confirmation email.
                        </li>
                        <li>This action cannot be undone.</li>
                        <li>If you click Cancel removal , no changes will be made.</li>
                    </ul>

                    <p class="govuk-body">
                        To proceed, check the box below and click Accept removal . If you do not
                        wish to proceed, click Cancel removal .
                    </p>


                    @await Html.PartialAsync("~/Views/PartialViews/_CheckBoxView.cshtml", new ConsentCheckBoxViewModel
                       {
                           PropertyName = "HasConsent",
                           Value = Model.HasConsent,
                           HasError = Html.ViewData.ModelState.ContainsKey("HasConsent") && Html.ViewData.ModelState["HasConsent"].Errors.Count > 0,
                           ErrorMessage = Html.ViewData.ModelState.ContainsKey("HasConsent") && Html.ViewData.ModelState["HasConsent"].Errors.Count > 0 ?
                            Html.ViewData.ModelState["HasConsent"].Errors[0].ErrorMessage : string.Empty,
                           Label = "I agree to proceed with my application to join the register of digitial identity and attribute services"

                       })
                    <div class="govuk-button-group">

                        <button type="submit" class="govuk-button" data-module="govuk-button" name="action" value="remove">
                            Accept removal
                        </button>
                        <button type="submit" class="govuk-button govuk-button--secondary" data-module="govuk-button" name="action" value="cancel">
                            Cancel removal
                        </button>
                    </div>

                </div>
            </div>
        </main>
    </div>


}


