@model DVSRegister.Models.CAB.ConfirmPasswordViewModel
@{
    ViewData["Title"] = "Create password";
    Layout = "~/Views/Shared/_Layout_CAB.cshtml";
}

@using (Html.BeginForm("ConfirmPasswordCheck", "Login", FormMethod.Post))
{
    @Html.HiddenFor(m => m.PasswordReset)
    <div class="govuk-width-container">
        <main class="govuk-main-wrapper">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                    @if (!ViewData.ModelState.IsValid)
                    {
                        ViewData["Title"] = "Error: " + ViewData["Title"];
                        @await Html.PartialAsync("~/Views/PartialViews/_ErrorSummaryView.cshtml", Model)
                    }

                    <h1 class="govuk-heading-xl govuk-!-margin-top-8">Create a password</h1>

                    <p class="govuk-body">Your password needs to be 10 or more characters. To help you create a long and strong password, the National Cyber Security Centre recommends using three random words.</p>

                    <p class="govuk-body">You can use a mix of letters, numbers or symbols in these three words.</p>
                 
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "govuk-error-message" })
                    <div class="govuk-form-group govuk-password-input @(Html.ViewData.ModelState.ContainsKey("Password") && Html.ViewData.ModelState["Password"].Errors.Count > 0 ? "govuk-form-group--error" :"" )" data-module="govuk-password-input">
                        <label class="govuk-label" for="password-input">
                            Password
                        </label>
                        <div class="govuk-input__wrapper govuk-password-input__wrapper">
                           
                            @Html.TextBoxFor(m => m.Password, new { @class = "govuk-input govuk-input--width-20", id = "password", name = "password", type = "password" })
                        </div>
                    </div>
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "govuk-error-message" })
                    <div class="govuk-form-group govuk-password-input @(Html.ViewData.ModelState.ContainsKey("ConfirmPassword") && Html.ViewData.ModelState["ConfirmPassword"].Errors.Count > 0 ? "govuk-form-group--error" :"" )" data-module="govuk-password-input">
                        <label class="govuk-label" for="password-input">
                            Confirm Password
                        </label>
                        <div class="govuk-input__wrapper govuk-password-input__wrapper">
                           
                            @Html.TextBoxFor(m => m.ConfirmPassword, new { @class = "govuk-input govuk-input--width-20", id = "confirmpassword", name = "confirm-password", type = "password" })
                        </div>
                    </div>

                    <button type="submit" class="govuk-button govuk-!-margin-top-2" data-module="govuk-button">
                        Continue
                    </button>

                </div>
            </div>
        </main>
    </div>
}

