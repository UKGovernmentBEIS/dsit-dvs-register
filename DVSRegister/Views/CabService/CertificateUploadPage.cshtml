@model DVSRegister.Models.CAB.CertificateFileViewModel

@{
    ViewData["Title"] = "Upload the  certificate of conformity for this service";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}
@{
    bool hasError = false;
}

@using (Html.BeginForm("SaveCertificate", "CabService", FormMethod.Post, new { enctype ="multipart/form-data"}))
{
    @Html.HiddenFor(m => m.FromSummaryPage, new { @Value = ViewBag.fromSummaryPage })
    @Html.HiddenFor(m => m.FromDetailsPage, new { @Value = ViewBag.fromDetailsPage })
    @Html.HiddenFor(m => m.RefererURL)
   
    <div class="govuk-width-container">
        <a href="@Model.RefererURL" class="govuk-back-link">
            Back
        </a>

        <main class="govuk-main-wrapper govuk-main-wrapper--l" id="main-content" role="main">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                   
                    @if (Html.ViewData?.ModelState.ContainsKey("File") == true && Html.ViewData.ModelState["File"].Errors.Count > 0)
                    {
                        var errors = Html.ViewData?.ModelState["File"]?.Errors;
                        if (errors != null && errors.Count > 0)
                        {
                            hasError = true;
                            ViewData["Title"] = "Error: " + ViewData["Title"];
                            @await Html.PartialAsync("~/Views/PartialViews/_SpecificErrorsView.cshtml",
                                     new Tuple<string, IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>>("File", errors))
                        }
                    }
                    <h1 class="govuk-heading-xl">Upload the  certificate of conformity for this service</h1>

                    <p class="govuk-body">
                       Please use the following
                        standardised format to name your file: Certificate-DateOfIssue-TradingName-ServiceName.pdf
                    </p>

                    <p class="govuk-body">
                        When entering the date of issue within the file name, you should use a
                        DDMMYY format. For example, if the issue date is the 15th of June 2023,
                        enter 150623.
                    </p>                  



                    @{
                        var fileViewModel = new TextBoxViewModel
                        {
                            PropertyName = "File",
                            Label = "Upload the  certificate of conformity for this service",
                            File = Model.File,
                            Class = "govuk-file-upload",
                            TextBoxType = "file",
                            Hint = "This file should be in PDF format and no bigger than 5MB",
                            HasError = hasError,
                            ErrorMessage = hasError ? Html.ViewData?.ModelState["File"]?.Errors[0].ErrorMessage ?? string.Empty : string.Empty,
                        };
                    }

                    @await Html.PartialAsync("~/Views/PartialViews/_TextBoxView.cshtml", fileViewModel)
                

                    @if (ViewData.Model?.FileUploadedSuccessfully == true)
                    {
                        <p class="govuk-body">1 document</p>
                        <dl class="govuk-summary-list">
                            <div class="govuk-summary-list__row">
                                <dd class="govuk-summary-list__value">
                                    @Model.FileName
                                </dd>
                                <dd class="govuk-summary-list__actions">
                                    <a class="govuk-link" href="/cab-service/submit-service/certificate-upload?fromSummaryPage=@ViewBag.fromSummaryPage&remove=true&fromDetailsPage=@ViewBag.fromDetailsPage" aria-label="Remove service provider’s certificate of conformity ">Remove<span class="govuk-visually-hidden"> Remove file</span></a>
                                    
                                </dd>
                            </div>
                        </dl>
                        @Html.HiddenFor(m => m.FileUploadedSuccessfully)
                    }

                    @if (Model != null && Model.IsAmendment)
                    {
                        <div class="govuk-button-group">
                            <button type="submit" class="govuk-button govuk-!-margin-top-2" name="action" value="amend">Save changes</button>
                            <a href="@Model.RefererURL" class="govuk-button govuk-button--secondary" role="button" draggable="false" data-module="govuk-button">
                                Cancel
                            </a>
                        </div>
                    }
                    else{
                    <div class="govuk-button-group">
                        <button type="submit" class="govuk-button govuk-!-margin-top-6" data-module="govuk-button" name="action" value="continue">
                            Continue
                        </button>
                        <button type="submit" role="link" class="govuk-button govuk-button--secondary" name="action" value="draft">  Save and complete later </button>
                    </div>
                    }
                   
                </div>
            </div>
        </main>
    </div>
}
