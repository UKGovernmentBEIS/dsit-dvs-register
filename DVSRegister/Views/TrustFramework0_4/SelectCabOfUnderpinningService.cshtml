@model DVSRegister.Models.CabTrustFramework.SelectCabViewModel
@using DVSRegister.Extensions
@using DVSRegister.CommonUtility.Models
@using DVSRegister.CommonUtility
@using DVSRegister.BusinessLogic.Models.CAB

@{
    ViewData["Title"] = "Conformity Assessment Body of the underpinning service";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}

<div class="govuk-width-container">
    <a href="@Model.RefererURL" class="govuk-back-link">
        Back
    </a>
    <main id="main-content" class="govuk-main-wrapper" role="main">
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                @if (ViewData.ModelState.ErrorCount > 0)
                {
                    @if (Html.ViewData.ModelState["SelectedCabId"].Errors.Count > 0)
                    {
                        ViewData["Title"] = "Error: " + ViewData["Title"];
                        @await Html.PartialAsync("~/Views/PartialViews/_ErrorSummaryView.cshtml", Model)
                    }
                }
                <h1 class="govuk-heading-xl">Conformity Assessment Body of the underpinning service</h1>
                <p class="govuk-body">
                    This must match the certifying CAB listed on the certificate. The information
                    you provide will be publicly displayed on the register of digital identity and
                    attribute services.
                </p>
                @using (Html.BeginForm("SaveSelectedCab", "TrustFramework0_4", FormMethod.Post))
                {
                    @Html.HiddenFor(m => m.FromSummaryPage, new { @Value = ViewBag.fromSummaryPage })
                    @Html.HiddenFor(m => m.FromDetailsPage, new { @Value = ViewBag.fromDetailsPage })
                    @Html.HiddenFor(m => m.RefererURL)
                    @Html.HiddenFor(m => m.FromUnderPinningServiceSummaryPage, new { @Value = ViewBag.fromUnderPinningServiceSummaryPage })
                    <div class="govuk-form-group govuk-!-margin-bottom-7">

                        <label class="govuk-label govuk-!-font-weight-bold govuk-!-margin-bottom-2" for="selectedcabid">
                            CAB name
                        </label>

                        @Html.DropDownListFor(s => s.SelectedCabId, new SelectList(Model.Cabs ?? new List<CabDto>(), "Id", "CabName"), "Choose a CAB",
                        new
                        {
                            @class = "govuk-select govuk-!-width-two-thirds " + (ViewData.ModelState.IsValid ? "" : "govuk-select--error"),
                            id = "selectedcabid",
                            name = "SelectedCabId",
                            aria_describedby = ViewData.ModelState.IsValid ? "" : "select-cab-error"
                        })

                    </div>
                    @if (Model != null && Model.IsAmendment)
                    {
                        <div class="govuk-button-group">
                            <button type="submit" class="govuk-button govuk-!-margin-top-2" name="action" value="amend">Save changes</button>
                            <a href="@Model.RefererURL" class="govuk-button govuk-button--secondary" role="button" draggable="false" data-module="govuk-button">
                                Cancel
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="govuk-button-group">
                            <button type="submit" class="govuk-button govuk-!-margin-top-2" name="action" value="continue">Continue</button>
                            <button type="submit" role="link" class="govuk-button govuk-button--secondary" name="action" value="draft">  Save and complete later </button>
                        </div>
                    }
                }
            </div>
        </div>
    </main>
</div>